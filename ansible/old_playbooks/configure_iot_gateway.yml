---
- hosts: 192.168.0.105
#user: pi
#become_user: root
#become: yes

#run: ansible-playbook configure_iot_gateway.yml --extra-vars "gateway=iot-gateway005"
su: yes
su_user: root

vars: 
foo: ' '
# created with:
# python -c 'import crypt; print crypt.crypt("iotuser", "iotuser")'
password: ioPcmo/ol77oI
gateway: '{{ gateway }}'
    
tasks:

#- name: Delete file /etc/apt/apt.conf.d/95proxies if it exits
#  file: path=/etc/apt/apt.conf.d/95proxies state=absent 
              
#- name: Create an empty file  /etc/apt/apt.conf.d/95proxies
#  copy: 
#   dest: /etc/apt/apt.conf.d/95proxies
#   content: "{{ foo }}"

- name: Create an empty file  /etc/apt/apt.conf.d/95proxies
  file: path=/etc/apt/apt.conf.d/95proxies state=touch
      
#- name: Configure Apt Proxy
#  blockinfile:
#    dest: /etc/apt/apt.conf.d/95proxies
#    block: |
#      Acquire::http::proxy "http://pfde-extproxy.de.pepperl-fuchs.com:3128/";
              
- name: Change hostname to iot-gateway005
  hostname: name={{ gateway }}
              
              
#- name: Delete file /etc/environment to configure the system proxy
#  file: path=/etc/environment state=absent 
              
#- name: Create new file /etc/environment
#  copy: 
#   dest: /etc/environment
#   content: "{{ foo }}"
      
#- name: Update /etc/environment
#  blockinfile:
#    dest: /etc/environment
#    block: |
#      http_proxy=http://pfde-extproxy.de.pepperl-fuchs.com:3128
              
- name: Create new file /etc/environment
  file: path=/etc/environment state=touch
              
- name: Install openvpn
  apt: name=openvpn state=present update_cache=yes  
  
- name: check if openvpn has been installed succesfully
  stat: path=/etc/openvpn
  register: check_path

- name: Configure the openvpn service to start automatically if /etc/openvpn exits
  lineinfile: backup=yes state=present dest=/etc/default/openvpn regexp='^#?AUTOSTART="all"' line=AUTOSTART="all"
  when: check_path.stat.exists
  
- name: Create subdirectory certs in /etc/openvpn/ if openvpn has been installed succesfully
  file: path=/etc/openvpn/certs state=directory group=root owner=root mode=700
  when: check_path.stat.exists

- name: check if /etc/openvpn/certs folder has been created successfully
  stat: path=/etc/openvpn/certs
  register: check_certs_folder     
  
#- name: Copy certificate into the subfolder /etc/openvpn/certs if subfolder exists( Please update the source path once a real certifate is available)
#  copy: src=/home/joerg/empty_certificate.txt dest=/etc/openvpn/certs group=root owner=root mode=700
#  when: check_certs_folder.stat.exists

#- name: Copy the configuration file to /etc/openvpn/client443.conf if openvpn has been installed succesfully( The file is missing for the moment. We are just using an empty test file)
#  copy: src=/home/joerg/fake_client443.conf   dest=/etc/openvpn group=root owner=root
#  when: check_path.stat.exists     
  
- name: Install python3
  apt: name=python3 state=present 
  
  
- name: Install screen
  apt: name=screen state=present
  

# Walk through account creation, modification, and deletion
- name: Create a new user and add it to the group 'dialout' 
  user: name=iotuser groups=dialout password={{ password }} shell=/bin/bash home=/home/iotuser

- name: Add user 'iotuser' to sudoers file
  lineinfile: dest=/etc/sudoers state=present line='iotuser ALL=(ALL:ALL) ALL' validate='visudo -cf %s'

- name: Edit file /etc/hosts
  lineinfile: dest=/etc/hosts state=absent regexp='^127.0.1.1'
  
- name: Edit file /etc/hosts
  lineinfile: dest=/etc/hosts state=present line='127.0.1.1         {{ gateway }}'

  
  
#- name: Reboot the server 
#  shell: sleep 2 && shutdown -r now 
#  async: 1
#  poll: 0
#  ignore_errors: true
      
#- name: waiting for server to comeback
#  local_action: wait_for host={{ inventory_hostname }} state=started port=22 delay=30 timeout=300 connect_timeout=15
  

- name: Remove user Pi
  user: name=ismael state=absent force=yes  
  
- name: Remove directory /home/pi
  file: path=/home/ismael state=absent
  
  
- name: Reboot the server again after removing user pi
  shell: sleep 2 && shutdown -r now 
  async: 1
  poll: 0
  ignore_errors: true
  become_user: root
  become: yes    
- name: waiting for server to comeback
  local_action: wait_for host={{ ansible_default_ipv4.address }} state=started port=22 delay=30 timeout=300 connect_timeout=15
    

      
